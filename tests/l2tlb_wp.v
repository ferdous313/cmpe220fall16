/* this file automatically generated by make_wp.py script
 * for file l2tlb.v
 * for module l2tlb
 * with the instance name top
 */


// This module is instantiated inside the l2cache
//
// The l1TLB has to track at least 4 SPBTRs at once, but no need to have
// unlimited. This means that just 4 flops translating SBPTR to valid indexes
// are enough. If a new SBPTR checkpoint create arrives, the TLB can
// invalidate all the associated TLB entries (and notify the L1 accordingly)
//

module l2tlb_wp(
  /* verilator lint_off UNUSED */
	input	logic				clk
	,input	logic				reset

  // L2TLB listens the same L1 request (but no ack). Response sent to L2
	,input	logic				l1tol2tlb_req_valid
	,output	logic				l1tol2tlb_req_retry
	//  ,input  I_l1tol2tlb_req_type     l1tol2tlb_req
	,input	L1_reqid_type			l1tol2tlb_req_1lid
	,input	logic				l1tol2tlb_req_prefetch
	,input	SC_poffset_type			l1tol2tlb_req_poffset
	,input	TLB_hpaddr_type			l1tol2tlb_req_hpaddr

	,output	logic				l2tlbtol2_fwd_valid
	,input	logic				l2tlbtol2_fwd_retry
	//  ,output I_l2tlbtol2_fwd_type     l2tlbtol2_fwd
	,output	L1_reqid_type			l2tlbtol2_fwd_1lid
	,output	logic				l2tlbtol2_fwd_prefetch
	,output	SC_fault_type			l2tlbtol2_fwd_fault
	,output	TLB_hpaddr_type			l2tlbtol2_fwd_hpaddr
	,output	SC_paddr_type			l2tlbtol2_fwd_paddr

  // l1TLB and L2TLB interface
	,output	logic				l2tlbtol1tlb_snoop_valid
	,input	logic				l2tlbtol1tlb_snoop_retry
	//  ,output I_l2tlbtol1tlb_snoop_type l2tlbtol1tlb_snoop
	,output	TLB_reqid-type			l2tlbtol1tlb_snoop_rid
	,output	TLB_hpaddr_type			l2tlbtol1tlb_snoop_hpaddr

	,output	logic				l2tlbtol1tlb_ack_valid
	,input	logic				l2tlbtol1tlb_ack_retry
	//  ,output I_l2tlbtol1tlb_ack_type  l2tlbtol1tlb_ack
	,output	TLB_reqid_type			l2tlbtol1tlb_ack_rid
	,output	TLB_hpaddr_type			l2tlbtol1tlb_ack_hpaddr
	,output	SC_ppaddr_type			l2tlbtol1tlb_ack_ppaddr
	,output	SC_dctlbe_type			l2tlbtol1tlb_ack_dctlbe

	,input	logic				l1tlbtol2tlb_req_valid
	,output	logic				l1tlbtol2tlb_req_retry
	//  ,input  I_l1tlbtol2tlb_req_type  l1tlbtol2tlb_req
	,input	TLB_reqid_type			l1tlbtol2tlb_req_rid
	,input	logic				l1tlbtol2tlb_req_disp_req
	,input	logic				l1tlbtol2tlb_req_disp_A
	,input	logic				l1tlbtol2tlb_req_disp_B
	,input	TLB_hpaddr_type			l1tlbtol2tlb_req_disp_hpaddr
	,input	SC_laddr_type			l1tlbtol2tlb_req_laddr
	,input	SC_sptbr_type			l1tlbtol2tlb_req_sptbr

	,input	logic				l1tlbtol2tlb_sack_valid
	,output	logic				l1tlbtol2tlb_sack_retry
	//  ,input  I_l1tlbtol2tlb_sack_type l1tlbtol2tlb_sack
	,input	TLB_reqid_type			l1tlbtol2tlb_sack_rid
  
  //---------------------------
  // Directory interface (l2 has to arbitrate between L2 and L2TLB
  // messages based on nodeid. Even nodeid is L2, odd is L2TLB)
	,output	logic				l2todr_req_valid
	,input	logic				l2todr_req_retry
	//  ,output I_l2todr_req_type        l2todr_req
	,output	SC_nodeid_type			l2todr_req_nid
	,output	L2_reqid_type			l2todr_req_l2id
	,output	SC_cmd_type			l2todr_req_cmd
	,output	SC_paddr_type			l2todr_req_paddr

	,input	logic				drtol2_snack_valid
	,output	logic				drtol2_snack_retry
	//  ,input  I_drtol2_snack_type      drtol2_snack
	,input	SC_nodeid_type			drtol2_snack_nid
	,input	L2_reqid_type			drtol2_snack_l2id
	,input	DR_reqid_type			drtol2_snack_drid
	,input	SC_snack_type			drtol2_snack_snack
	,input	SC_line_type			drtol2_snack_line
	,input	SC_paddr_type			drtol2_snack_paddr

	,output	logic				l2todr_snoop_ack_valid
	,input	logic				l2todr_snoop_ack_retry
	//  ,output I_l2snoop_ack_type       l2todr_snoop_ack
	,output	L2_reqid_type			l2todr_snoop_ack_l2id

	,output	logic				l2todr_disp_valid
	,input	logic				l2todr_disp_retry
	//  ,output I_l2todr_disp_type       l2todr_disp
	,output	SC_nodeid_type			l2todr_disp_nid
	,output	L2_reqid_type			l2todr_disp_l2id
	,output	DR_reqid_type			l2todr_disp_drid
	,output	SC_disp_mask_type		l2todr_disp_mask
	,output	SC_dcmd_type			l2todr_disp_dcmd
	,output	SC_line_type			l2todr_disp_line
	,output	SC_paddr_type			l2todr_disp_paddr

	,input	logic				drtol2_dack_valid
	,output	logic				drtol2_dack_retry
	//  ,input  I_drtol2_dack_type       drtol2_dack
	,input	SC_nodeid_type			drtol2_dack_nid
	,input	L2_reqid_type			drtol2_dack_l2id
  /* verilator lint_on UNUSED */
);




	I_l1tol2tlb_req_type l1tol2tlb_req;
	assign l1tol2tlb_req.1lid = l1tol2tlb_req_1lid;
	assign l1tol2tlb_req.prefetch = l1tol2tlb_req_prefetch;
	assign l1tol2tlb_req.poffset = l1tol2tlb_req_poffset;
	assign l1tol2tlb_req.hpaddr = l1tol2tlb_req_hpaddr;

	I_l2tlbtol2_fwd_type l2tlbtol2_fwd;
	assign l2tlbtol2_fwd_1lid = l2tlbtol2_fwd.1lid;
	assign l2tlbtol2_fwd_prefetch = l2tlbtol2_fwd.prefetch;
	assign l2tlbtol2_fwd_fault = l2tlbtol2_fwd.fault;
	assign l2tlbtol2_fwd_hpaddr = l2tlbtol2_fwd.hpaddr;
	assign l2tlbtol2_fwd_paddr = l2tlbtol2_fwd.paddr;

	I_l2tlbtol1tlb_snoop_type l2tlbtol1tlb_snoop;
	assign l2tlbtol1tlb_snoop_rid = l2tlbtol1tlb_snoop.rid;
	assign l2tlbtol1tlb_snoop_hpaddr = l2tlbtol1tlb_snoop.hpaddr;

	I_l2tlbtol1tlb_ack_type l2tlbtol1tlb_ack;
	assign l2tlbtol1tlb_ack_rid = l2tlbtol1tlb_ack.rid;
	assign l2tlbtol1tlb_ack_hpaddr = l2tlbtol1tlb_ack.hpaddr;
	assign l2tlbtol1tlb_ack_ppaddr = l2tlbtol1tlb_ack.ppaddr;
	assign l2tlbtol1tlb_ack_dctlbe = l2tlbtol1tlb_ack.dctlbe;

	I_l1tlbtol2tlb_req_type l1tlbtol2tlb_req;
	assign l1tlbtol2tlb_req.rid = l1tlbtol2tlb_req_rid;
	assign l1tlbtol2tlb_req.disp_req = l1tlbtol2tlb_req_disp_req;
	assign l1tlbtol2tlb_req.disp_A = l1tlbtol2tlb_req_disp_A;
	assign l1tlbtol2tlb_req.disp_B = l1tlbtol2tlb_req_disp_B;
	assign l1tlbtol2tlb_req.disp_hpaddr = l1tlbtol2tlb_req_disp_hpaddr;
	assign l1tlbtol2tlb_req.laddr = l1tlbtol2tlb_req_laddr;
	assign l1tlbtol2tlb_req.sptbr = l1tlbtol2tlb_req_sptbr;

	I_l1tlbtol2tlb_sack_type l1tlbtol2tlb_sack;
	assign l1tlbtol2tlb_sack.rid = l1tlbtol2tlb_sack_rid;

	I_l2todr_req_type l2todr_req;
	assign l2todr_req_nid = l2todr_req.nid;
	assign l2todr_req_l2id = l2todr_req.l2id;
	assign l2todr_req_cmd = l2todr_req.cmd;
	assign l2todr_req_paddr = l2todr_req.paddr;

	I_drtol2_snack_type drtol2_snack;
	assign drtol2_snack.nid = drtol2_snack_nid;
	assign drtol2_snack.l2id = drtol2_snack_l2id;
	assign drtol2_snack.drid = drtol2_snack_drid;
	assign drtol2_snack.snack = drtol2_snack_snack;
	assign drtol2_snack.line = drtol2_snack_line;
	assign drtol2_snack.paddr = drtol2_snack_paddr;

	I_l2snoop_ack_type l2todr_snoop_ack;
	assign l2todr_snoop_ack_l2id = l2todr_snoop_ack.l2id;

	I_l2todr_disp_type l2todr_disp;
	assign l2todr_disp_nid = l2todr_disp.nid;
	assign l2todr_disp_l2id = l2todr_disp.l2id;
	assign l2todr_disp_drid = l2todr_disp.drid;
	assign l2todr_disp_mask = l2todr_disp.mask;
	assign l2todr_disp_dcmd = l2todr_disp.dcmd;
	assign l2todr_disp_line = l2todr_disp.line;
	assign l2todr_disp_paddr = l2todr_disp.paddr;

	I_drtol2_dack_type drtol2_dack;
	assign drtol2_dack.nid = drtol2_dack_nid;
	assign drtol2_dack.l2id = drtol2_dack_l2id;


top_2core2dr top(.*);
endmodule
